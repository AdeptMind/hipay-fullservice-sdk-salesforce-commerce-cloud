/**
 * Initialize REST service registry for a HiPay API
 */
var ServiceConfig = require('dw/svc/ServiceConfig');
var ServiceCredential = require('dw/svc/ServiceCredential');
var ServiceRegistry = require('dw/svc/ServiceRegistry');
var HTTPService = require('dw/svc/HTTPService');
var HTTPClient = require('dw/net/HTTPClient');
var Encoding = require('dw/crypto/Encoding');
var Bytes = require('dw/util/Bytes');

/* HiPay REST Hosted Payment Service Registry */
ServiceRegistry.configure("hipay.rest.hpayment", {
	createRequest: function(svc: HTTPService, args) {
		svc.addHeader("Content-Type", "application/x-www-form-urlencoded");
		svc.addHeader("Cache-Control", "no-cache");
		svc.addHeader("Accept", "application/json");

		var serviceConfig: ServiceConfig = svc.getConfiguration();
		var credentials: ServiceCredential = serviceConfig.getCredential();
		var credString = credentials.getUser() + ":" + credentials.getPassword();
		var base64Credentials = Encoding.toBase64(new Bytes(credString));
		svc.addHeader("Authentication", "Basic " + base64Credentials);

		svc.setRequestMethod("POST");

		return args;
	},
	parseResponse: function(svc: HTTPService, client: HTTPClient) {
		return client;
	},
	mockCall: function(svc: HTTPService, client: HTTPClient) {}
});

/* HiPay Generate Token Service Registry */
ServiceRegistry.configure("hipay.rest.createtoken", {
	createRequest: function(svc: HTTPService, args) {
		svc.addHeader("Content-Type", "application/x-www-form-urlencoded");
		svc.addHeader("Cache-Control", "no-cache");
		svc.addHeader("Accept", "application/json");

		var serviceConfig: ServiceConfig = svc.getConfiguration();
		var credentials: ServiceCredential = serviceConfig.getCredential();
		var credString = credentials.getUser() + ":" + credentials.getPassword();
		var base64Credentials = Encoding.toBase64(new Bytes(credString));
		svc.addHeader("Authentication", "Basic " + base64Credentials);

		svc.setRequestMethod("POST");

		return args;
	},
	parseResponse: function(svc: HTTPService, client: HTTPClient) {
		return client;
	},
	mockCall: function(svc: HTTPService, client: HTTPClient) {}
});

/* HiPay Order Service */
ServiceRegistry.configure("hipay.rest.order", {
	createRequest: function(svc: HTTPService, args) {
		svc.addHeader("Content-Type", "application/x-www-form-urlencoded");
		svc.addHeader("Cache-Control", "no-cache");
		svc.addHeader("Accept", "application/json");

		var serviceConfig: ServiceConfig = svc.getConfiguration();
		var credentials: ServiceCredential = serviceConfig.getCredential();
		var credString = credentials.getUser() + ":" + credentials.getPassword();
		var base64Credentials = Encoding.toBase64(new Bytes(credString));
		svc.addHeader("Authentication", "Basic " + base64Credentials);

		svc.setRequestMethod("POST");

		return args;
	},
	parseResponse: function(svc: HTTPService, client: HTTPClient) {
		return client;
	},
	mockCall: function(svc: HTTPService, client: HTTPClient) {}
});

/* HiPay REST Maintenance Service Registry */
ServiceRegistry.configure("hipay.rest.maintenance", {
	createRequest: function(svc: HTTPService, args) {
		svc.addHeader("Content-Type", "application/x-www-form-urlencoded");
		svc.addHeader("Cache-Control", "no-cache");
		svc.addHeader("Accept", "application/json");

		var serviceConfig: ServiceConfig = svc.getConfiguration();
		var credentials: ServiceCredential = serviceConfig.getCredential();
		var credString = credentials.getUser() + ":" + credentials.getPassword();
		var base64Credentials = Encoding.toBase64(new Bytes(credString));
		svc.addHeader("Authentication", "Basic " + base64Credentials);

		svc.setRequestMethod("POST");

		return args;
	},
	parseResponse: function(svc: HTTPService, client: HTTPClient) {
		return client;
	},
	mockCall: function(svc: HTTPService, client: HTTPClient) {}
});